<section xml:id="VDG-Cookbook-Create-Disks-with-Backing-Images"
	 xmlns="http://docbook.org/ns/docbook"
	 xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Creating Disks with Backing Images</title>

  <para>
    Using backing images for work I was doing is a trick I figured out
    a few years ago. Back then I was doing lots of development on a
    host provisioning tools and needed to be able to quickly revert
    machines I was working on to a perfect clean state. Backing images
    were especially handy when working on features that frequently
    hosed the machine if it didn't work right.
  </para>

  <para>
    Snapshots were an option, but how they worked wasn't documented
    very well at the time (Snapshots will be covered in another
    section). The technical concepts and practical skills describe in
    this section mostly applies to Snapshots too.
  </para>

  <para>
    So I went with backing images, they worked great for what I needed
    to them do. I could work incrementally and "commit" changes in the
    COW image (copy-on-write) back to the master. I also could use the
    same base-image for multiple COWs at once which meant other people
    on my team could all be using the same base-image if we were
    working on the same thing.
  </para>

  <note>
    <para>
      The terms <literal>base-image</literal> and
      <literal>backing-image</literal> are used interchangably to
      refer to the read-only image that is used to back a read-write
      disk.
    </para>
  </note>

  <note>
    <para>
      When we refer to a <literal>COW</literal> image it has no
      connotation to the <literal>COW</literal> ("copy-on-write") disk
      format. Saying <literal>COW</literal> only serves to help make a
      distinction between the read-only base-image and the image that
      changes are copied to on writing.
    </para>
  </note>

  <example xml:id="VDG-Cookbook-Example-Create-Disk-with-a-Backing-Image">
    <title>Creating a Disk with a Backing Image</title>

    <screen><xi:include href="../examples/cookbook-create-disk-with-a-backing-image01" parse="text"/></screen>
  </example>

  <procedure xml:id="VDG-Cookbook-Steps-Create-Disk-with-a-Backing-Image">
    <title>Steps in Detail</title>

    <step>
      <para>
	It's bad practice to just have a bunch of disk images in a
	directory so we made two here. <filename
	class="directory">/srv/images/base-images/</filename> to hold
	all the base-images on this system and <filename
	class="directory">/srv/images/webserver01</filename> to later
	hold the disk assigned to the virtual machine.
      </para>
    </step>

    <step>
      <para>
	Next we go into the base images directory and create a small
	10G image, type: QCOW2.
      </para>
    </step>

    <step>
      <para>
	Normally what we used to do at this point is create a virtual
	machine that uses this disk for it's primary drive. It would
	get a base OS provisioned on it and any other tweaks we needed
	there each time it was wiped.
      </para>
    </step>

    <step>
      <para>
	Once the machine was what we wanted in a "Golden Master" it
	was shutdown and the backing image would be made read-only.
      </para>
    </step>

    <step>
      <para>
	The next step was creating the copy-on-write (COW) image. See
	how in the example we give the <option>-b</option> option with
	the <emphasis>full path</emphasis> to the base-image? Also
	note that no size is given after the file name. Size is
	constrained to the size of a disks base-image.
      </para>
    </step>

    <step>
      <para>
	With the image preparation complete we would modify the
	virtual machines configuration and set its primary disk drive
	to the COW in the webserver01 directory.
      </para>
    </step>
  </procedure>

  <para>
    Sometimes we would want to update a base-image to resemble the
    contents of an attached COW image. Maybe we wanted to make the
    latest system updates a part of the base image, or a configuration
    setting needed to be updated. This was as simple as making the
    base-image read-write, and running <command>qemu-img commit
    /srv/images/webserver01/image-webserver-devel.qcow2</command>.
  </para>

  <important>
    <para>
      It's not crucial, but highly recommend that the virtual machine
      is turned off when running the <command>commit</command>
      command.
    </para>
  </important>

</section>
